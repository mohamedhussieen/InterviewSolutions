#### **1. Difference Between Abstract Class and Interface Class**
- **Abstract Class**:
  - Can have methods with or without implementation.
  - Can define and use member variables with any access level (e.g., private, protected).
  - Supports constructors to initialize fields.
  - A class can extend only one abstract class.

- **Interface Class**:
  - Defines a contract with method signatures but no implementation (pure abstraction).
  - Cannot have fields (except constants).
  - Multiple interfaces can be implemented by a single class.

#### **2. What is Overloading and Overriding?**
- **Overloading**:
  - Methods with the same name but different parameters.
  - Used to perform similar tasks with variations.

- **Overriding**:
  - A subclass provides a new implementation for a method from its parent class.
  - Used to define specific behavior in a derived class.

#### **3. Why Doesnâ€™t OOP Languages Allow Multiple Inheritance?**
- Many programming languages avoid multiple inheritance to prevent **ambiguity problems**, where a class might inherit the same method or property from multiple parent classes.

#### **4. Can a Class Implement Multiple Interfaces?**
- Yes, a class can implement multiple interfaces because interfaces define "what" needs to be done but not "how."

#### **5. Difference Between Static and Final**
- **Static**:
  - Belongs to the class and shared across all instances.
  - Can be used for utility methods or shared constants.

- **Final**:
  - Prevents modification:
    - Variables declared as `final` cannot be reassigned.
    - Methods marked as `final` cannot be overridden.
    - Classes declared as `final` cannot be extended.

#### **6. What are the SOLID Principles?**
1. **Single Responsibility**: A class should only have one reason to change.
2. **Open/Closed**: Code should be open for extension but closed for modification.
3. **Liskov Substitution**: Objects of a subclass should be able to replace objects of the parent class.
4. **Interface Segregation**: Classes should not be forced to implement interfaces they don't use.
5. **Dependency Inversion**: Depend on abstractions, not concrete implementations.

---

### **Design Patterns**

#### **1. Types of Design Patterns**
1. **Creational**: Deal with object creation (e.g., Singleton, Factory).
2. **Structural**: Focus on object composition (e.g., Adapter, Proxy).
3. **Behavioral**: Manage communication between objects (e.g., Observer, Strategy).

#### **2. Singleton**
- Ensures only one instance of a class is created and provides a global access point.

#### **3. Observer**
- Defines a subscription mechanism where objects (observers) get notified of changes in another object (subject).

#### **4. MVC (Model-View-Controller)**
- **Model**: Manages data and business logic.
- **View**: Displays data to the user.
- **Controller**: Manages user input and updates the model or view accordingly.

---

### **Spring Boot**

#### **1. Advantages of Spring Boot**
- Simplifies dependency management.
- Provides embedded servers for easy setup (e.g., no separate server installation).
- Includes production-ready features like health checks and metrics.
- Reduces configuration using opinionated defaults.

#### **2. Life Cycle of Security**

---

### **Performance and Issue Resolution**

#### **1. How to Resolve Issues**
- **Debugging**: Use tools to step through the code and identify the issue.
- **Logging**: Review logs for error messages or unexpected behavior.
- **Testing**: Write unit tests to isolate and reproduce issues.

#### **2. How to Resolve Performance Issues in Code**
- **Profiling**: Use tools to identify bottlenecks (e.g., inefficient loops).
- **Optimize Algorithms**: Replace inefficient algorithms with more efficient ones.
- **Avoid Redundant Operations**: Cache reusable results instead of recalculating.

#### **3. How to Resolve Performance Issues in Database**
- **Indexing**: Create indexes for columns used in queries.
- **Query Optimization**: Analyze and rewrite queries to minimize execution time.
- **Connection Pooling**: Manage database connections efficiently.
- **Caching**: Store frequently used data in memory to reduce database load.
